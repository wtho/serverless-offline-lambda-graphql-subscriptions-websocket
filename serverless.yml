# Welcome to Serverless!
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: solg
# app for use with dashboard.serverless.com
app: solg-app

provider:
  name: aws
  runtime: nodejs12.x
  # overwrite defaults here
  stage: dev
  region: eu-central-1

  # statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource: 'arn:aws:execute-api:*:*:*/development/POST/@connections/*'
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      # Resource: !GetAtt ConnectionsDynamoDBTable.Arn
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE__CONNECTIONS}"
    - Effect: Allow
      Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      # Resource: !GetAtt EventsDynamoDBTable.StreamArn
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE__EVENTS}/stream"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      # Resource: !GetAtt EventsDynamoDBTable.Arn
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE__EVENTS}"
    - Effect: Allow
      Action:
        - dynamodb:BatchWriteItem
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
      # Resource: !GetAtt SubscriptionsDynamoDBTable.Arn
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE__SUBSCRIPTIONS}"
    - Effect: Allow
      Action:
        - dynamodb:BatchWriteItem
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
      # Resource: !GetAtt SubscriptionOperationsDynamoDBTable.Arn
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE__SUBSCRIPTION_OPERATIONS}"


  environment:
    DYNAMODB_TABLE__CONNECTIONS: ${self:service}-${opt:stage, self:provider.stage}-connections
    DYNAMODB_TABLE__SUBSCRIPTIONS: ${self:service}-${opt:stage, self:provider.stage}-subscriptions
    DYNAMODB_TABLE__SUBSCRIPTION_OPERATIONS: ${self:service}-${opt:stage, self:provider.stage}-subscription-operations
    DYNAMODB_TABLE__EVENTS: ${self:service}-${opt:stage, self:provider.stage}-events
    STAGE: ${opt:stage, self:provider.stage}
    REGION: ${self:provider.region}

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-plugin-offline-dynamodb-stream
  - serverless-offline # needs to be last

custom:
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: false   # Node modules configuration for packaging
    packager: 'npm'   # Packager that will be used to package your external modules
    # excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
  dynamodb:
    stages:
      - dev
    start:
      port: 32018
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  dynamodbStream:
    host: localhost
    port: 32018
    # this fixes the problem with missing region
    region: eu-central-1
    pollForever: true
    streams:
      - table: Events
        functions:
          - eventProcessorHandler


functions:
  graphqlWs:
    handler: src/handler.graphqlWs
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
  graphql:
    handler: src/handler.graphql
    events:
      - http:
          path: graphql 
          method: Any
          cors: true
  eventProcessorHandler:
    handler: src/handler.graphqlEvents
    events:
      - stream:
          enabled: true
          type: dynamodb
          arn:
            Fn::GetAtt: [EventsDynamoDBTable, StreamArn]

resources:
  Resources:
    ConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Connections
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          # connection id
          - AttributeName: id
            KeyType: HASH

    SubscriptionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # see DynamoDBSubscriptionManager
        TableName: Subscriptions
        AttributeDefinitions:
          - AttributeName: event
            AttributeType: S
          - AttributeName: subscriptionId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: event
            KeyType: HASH
          - AttributeName: subscriptionId
            KeyType: RANGE

    SubscriptionOperationsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # see DynamoDBSubscriptionManager
        TableName: SubscriptionOperations
        AttributeDefinitions:
          - AttributeName: subscriptionId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: subscriptionId
            KeyType: HASH

    EventsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # see DynamoDBEventStore
        TableName: Events
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # see ISubscriptionEvent
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        StreamSpecification:
          StreamViewType: NEW_IMAGE
